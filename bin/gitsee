#!/bin/bash

usage() { echo "Usage: $0 [-r remote] [-b branch] [-p path]" 1>&2; exit 1; }

PATH_SUFFIX=
REMOTE=origin
BRANCH=$(git rev-parse --abbrev-ref HEAD)

while getopts ":p:r:b:" o; do
  case "${o}" in
    p)
      [ -n "${OPTARG+1}" ] || usage
      PATH_SUFFIX=${OPTARG}
      ;;
    r)
      [ -n "${OPTARG+1}" ] || usage
      REMOTE=${OPTARG}
      ;;
    b)
      [ -n "${OPTARG+1}" ] || usage
      BRANCH=${OPTARG}
      ;;
    *)
      usage
      ;;
  esac
done

# try to get the base URL from the git remote command
REMOTE_VERBOSE=$(git remote -v)
if [[ $REMOTE_VERBOSE =~ ${REMOTE}[[:space:]]+(https:\/\/|git@)(github|gitlab|bitbucket)\.com(\:|\/)([^[:space:]]+)\.git? ]]; then
  REPO_URL=https://${BASH_REMATCH[2]}.com/${BASH_REMATCH[4]}
else
  echo unable to parse 
  echo $REMOTE_VERBOSE
  exit 1
fi

# check if the branch they want exists
if git ls-remote --heads --exit-code "$REPO_URL" "$BRANCH" 1>/dev/null; then
  echo -e branch "\x1b[36m$BRANCH\x1b[0m" is in remote "\x1b[32m$REMOTE\x1b[0m"
else
  echo -e branch "\x1b[36m$BRANCH\x1b[0m" is not in remote "\x1b[32m$REMOTE\x1b[0m"
  exit 1
fi

# get the subdirectory within the git repo
# normally this command gets it
PATH_PREFIX=$(git rev-parse --show-prefix)
# unless they are running this script from a git alias, then you need to look at $GIT_PREFIX
PATH_PREFIX="${PATH_PREFIX:-${GIT_PREFIX:-}}"

FULL_URL=${REPO_URL}/tree/${BRANCH}/${PATH_PREFIX}

if [ -n "${PATH_SUFFIX+1}" ]; then
  FULL_URL="$FULL_URL$PATH_SUFFIX"
fi

# open with MacOS or linux
if [ `uname -s` = Darwin ]; then
  open $FULL_URL
else
  google-chrome $FULL_URL
fi

